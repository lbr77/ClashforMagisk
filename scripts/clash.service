#!/system/bin/sh

scripts=`realpath $0`
scripts_dir=`dirname ${scripts}`
. /data/clash/clash.config

cmd_crond() {
    nohup ${busybox_path} crond -c ${Clash_run_path} > /dev/null 2>&1 &
}

dow_config() {
    if [ "${config_online}" == "true" ] ; then
        if ! [ "$(head -1 ${Clash_run_path}/root)" == "disable" ] ; then
            if ! (${scripts_dir}/clash.tool -o) ; then
                echo $date_log"err: failed to download config, make sure you are connected to the internet。" >> ${CFM_logs_file}
                exit 1
            fi
        fi
    fi
}

date_clash() {
    echo -n "" > ${CFM_logs_file} && echo "${date_day}" >> ${CFM_logs_file}
    echo "Clash for Magisk v1.13.1" > /dev/null
}

replace_kernel() {
    chmod 0755 /data/clash/kernel/lib/*
    rm -rf /data/clash/kernel/clash
    err="failed to replace kernel。"
    if [ "${use_premium}" == "true" ]; then
        cp -f ${Clash_Premium} /data/clash/kernel/clash \
        && echo "" || echo $date_log"err: ${err}" >> ${CFM_logs_file}
    else
        cp -f ${Clash_Meta} /data/clash/kernel/clash \
        && echo "" || echo $date_log"err: ${err}" >> ${CFM_logs_file}
    fi
}

use_clash() {
    if [ "${use_premium}" == "true" ]; then
        if [ -f "${Clash_bin_path}" ] ; then
            echo $date_log"info: select Clash Premium。" >> ${CFM_logs_file}
        else
            echo $date_log"err: kernel not detected ${Clash_bin_path}" >> ${CFM_logs_file}
            exit 1
        fi
    else
        if [ -f "${Clash_bin_path}" ] ; then
            echo $date_log"info: select Clash Meta。" >> ${CFM_logs_file}
        else
            echo $date_log"err: kernel not detected ${Clash_bin_path}" >> ${CFM_logs_file}
            exit 1
        fi
    fi
}

temporary_config_file() {
    if [ -f "${Clash_dns}" ] ; then
        if [ -f "${Clash_config_file}" ] ; then
           cp -f ${Clash_dns} ${temporary_config_file}.swp && echo "\n" >> ${temporary_config_file}.swp
           sed -n -E '/^proxies:$/,$p' ${Clash_config_file} >> ${temporary_config_file}.swp
           sed -i '/^[  ]*$/d' ${temporary_config_file}.swp
        else
           echo $date_log"err: files ${Clash_config_file} not found !!!" >> ${CFM_logs_file}
           exit 1
        fi
    else
        echo $date_log"err: files ${Clash_dns} not found !!!" >> ${CFM_logs_file}
        exit 1
    fi

    mv ${temporary_config_file}.swp ${temporary_config_file} \
    && echo $date_log"info: merge files ${Clash_config_file} & template Succes。" >> ${CFM_logs_file} || echo $date_log"err: merge files ${Clash_config_file} & template failed !!!" >> ${CFM_logs_file}

    if [ ! -f "${temporary_config_file}" ] ; then
       echo $date_log"err: ${temporary_config_file} not found !!!。" >> ${CFM_logs_file}
       exit 1
    fi
}

crontab_sec() {
        if [ ! "${schedule_update_kernel}" == "false" ]; then
            echo "${schedule_update_kernel} ${scripts_dir}/clash.tool -e" >> ${Clash_run_path}/root \
            && echo $date_log"info: schedule update-kernel (${schedule_update_kernel})" >> ${CFM_logs_file}
        else
            echo $date_log"info: schedule update-kernel not active。" >> ${CFM_logs_file}
        fi

        if [ ! "${update_interval}" == "false" ]; then
            echo "${update_interval} ${scripts_dir}/clash.tool -u" >> ${Clash_run_path}/root \
            && echo $date_log"info: schedule update-GeoX & SubScription (${update_interval})。" >> ${CFM_logs_file}
            echo $date_log"info: Geo status: [${auto_updateGeoX}] | Subs status: [${auto_updateSubcript}]。" >> ${CFM_logs_file}
        else
            echo $date_log"info: schedule update-GeoX & Subs not active。" >> ${CFM_logs_file}
        fi

        sed -i '/^[  ]*$/d' ${CFM_logs_file}
        if [ "${filter_local}" == "true" ] && [ "${Clash_tun_status}" == "false" ] ; then
            clash_cron="${scripts_dir}/clash.tool -a"
            echo "*/1 * * * * ${clash_cron}" >> ${Clash_run_path}/root && echo $date_log"warn: local Ip auto bypass is turn on。" >> ${CFM_logs_file}
        else
            echo ""
        fi
}

run_clash() {
            if (${Clash_bin_path} -t -d ${Clash_data_dir} -f ${temporary_config_file} > ${Clash_run_path}/config.logs 2>&1) ; then
                ulimit -SHn 1000000
                nohup ${busybox_path} setuidgid 0:3005 ${Clash_bin_path} -d ${Clash_data_dir} -f ${temporary_config_file} > /dev/null  2>&1 &
                echo -n $! > ${Clash_pid_file}

                sed -i s/.*msg=// ${Clash_run_path}/config.logs
                sed -i 's/configuration file*//' ${Clash_run_path}/config.logs
                while read p; do
                    echo ${date_log}"info:" "$p" >> ${CFM_logs_file}
                done <${Clash_run_path}/config.logs
            else
                echo $date_log"err: ${Clash_config_file} failed" >> ${CFM_logs_file}
                sed -i s/.*msg=// ${Clash_run_path}/config.logs
                sed -i 's/fatal msg=*//' ${Clash_run_path}/config.logs
                sed -i 's/configuration file*//' ${Clash_run_path}/config.logs
                while read p; do
                    echo ${date_log}"err:" "$p" >> ${CFM_logs_file}
                done <${Clash_run_path}/config.logs

                if [ "${use_config}" == "false" ]; then
                    mv ${temporary_config_file} ${Clash_data_dir}/config.yaml
                else
                    mv ${temporary_config_file} ${Clash_data_dir}/${use_config}
                fi
                echo $date_log"err: recheck ${Clash_config_file} & template。" >> ${CFM_logs_file}
                exit 1
            fi
}

start_clash() {
    cmd_crond
    dow_config
    date_clash
    replace_kernel

    if [ -f "/data/adb/modules/ClashForMagisk/disable" ]; then
        echo ""
    else
        ${Clash_bin_path} -v >> ${CFM_logs_file}
    fi
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" >> ${CFM_logs_file}
    if [ "${ipv6}" == "false" ] ; then
        echo 1 > /proc/sys/net/ipv6/conf/lo/disable_ipv6
        echo 1 > /proc/sys/net/ipv6/conf/default/disable_ipv6

        echo 0 > /proc/sys/net/ipv6/conf/all/accept_ra
        echo 0 > /proc/sys/net/ipv6/conf/wlan0/accept_ra

        echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
        echo 1 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
    else
        echo 0 > /proc/sys/net/ipv6/conf/lo/disable_ipv6
        echo 0 > /proc/sys/net/ipv6/conf/default/disable_ipv6

        echo 1 > /proc/sys/net/ipv6/conf/all/accept_ra
        echo 1 > /proc/sys/net/ipv6/conf/wlan0/accept_ra

        echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6
        echo 0 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
    fi 

    use_clash

    echo $date_log"info: config ${Clash_config_file}。" >> ${CFM_logs_file}
    echo $date_log"info: Status ipv6: ${ipv6}" >> ${CFM_logs_file}

    local PID=`cat ${Clash_pid_file} 2> /dev/null`
    if (cat /proc/${PID}/cmdline | grep -q ${Clash_bin_name}) ; then
        ${scripts_dir}/clash.iptables -s
        exit 1
    else
        echo $date_log"info: run Clash service。" >> ${CFM_logs_file}
    fi

    if [ "${Clash_tun_status}" == "true" ] ; then
        mkdir -p /dev/net
        [ ! -L /dev/net/tun ] && ln -sf /dev/tun /dev/net/tun
        echo $date_log"info: select [tun] mode, stack: [${Clash_stack_mode}] " >> ${CFM_logs_file}
        echo $date_log"info: create /dev/net/tun。" >> ${CFM_logs_file}
    else
        echo $date_log"info: select [tproxy] mode。" >> ${CFM_logs_file}
    fi
    temporary_config_file
    if [ -f "${Clash_bin_path}" ] ; then
        chown root:net_admin ${Clash_bin_path}
        chown root:net_admin ${temporary_config_file}
        chmod 6755 ${Clash_bin_path}
        chmod 0644 ${temporary_config_file}
        setcap 'cap_net_admin,cap_net_raw+ep' ${Clash_bin_path}
  
        ${busybox_path} crontab -c ${Clash_run_path} -r
        touch ${Clash_run_path}/root
        chmod 0600 ${Clash_run_path}/root
        crontab_sec
    else
        echo $date_log"err: Clash kernel ${Clash_bin_path} not found !!!。" >> ${CFM_logs_file}
        exit 1
    fi
    if [ -f ${temporary_config_file} ] ; then
        if (${Clash_bin_path} -v > /dev/null 2>&1) ; then
            run_clash
        else
            echo $date_log"err: kernel CFM error/broken/not supported ">> ${CFM_logs_file}
            exit 1
        fi
    else
        echo $date_log"err: ${Clash_config_file} not found。" >> ${CFM_logs_file}
        exit 1
    fi
    sleep 0.5
    if [ "${port_detect}" == "true" ]; then
        if ! (${scripts_dir}/clash.tool -p) ; then
            exit 0
        fi
    else
        echo $date_log"warn: skip port detected。" >> ${CFM_logs_file}
    fi
}

kill_clash() {
    if (ps -ef > /dev/null 2>&1) ; then
        clashkill=$(ps -ef | grep root | grep "clash -d /data/clash" | ${busybox_path} awk '{ print $2 }' | sort -u)
        for clashkil in ${clashkill[*]} ; do
           if [ "${Clash_tun_status}" == "true" ] ; then
              kill -9 ${clashkil}
           else
              kill -15 ${clashkil}
           fi
        done
    else
        echo $date_log"warn: hard kill Clash" >> ${CFM_logs_file}
        kill -9 `cat ${Clash_pid_file}`
    fi
}

kill_crond() {
    cronkill=$(ps -ef | grep root | grep "crond -c /data/clash/" | ${busybox_path} awk '{ print $2 }' | sort -u)
    for cronkil in ${cronkill[*]} ; do
       kill -15 ${cronkil}
    done
}

ceks_conflicts() {
    local PIDs=`cat ${Clash_pid_file} 2> /dev/null`
    if (cat /proc/${PIDs}/cmdline | grep -q ${Clash_bin_name}) ; then
        echo $date_log"err: clash conflicts, failed to stop Clash。" >> ${CFM_logs_file}
        ${scripts_dir}/clash.iptables -s
        exit 1
    else
        echo $date_log"warn: Clash has stopped。" >> ${CFM_logs_file}
    fi
}

stop_clash() {
    kill_clash
    kill_crond
    ceks_conflicts
    if [ -f ${Clash_run_path}/appuid.list ]; then
        rm -rf ${Clash_run_path}/appuid.list
    fi
    rm -rf ${Clash_pid_file}
}

cgroup_limit() {
    if [ "${Cgroup_memory_limit}" == "" ]; then
        return
    fi
    if [ "${Cgroup_memory_path}" == "" ]; then
        Cgroup_memory_path=$(mount | grep cgroup | ${busybox_path} awk '/memory/{print $3}' | head -1)
    fi
    mkdir -p "${Cgroup_memory_path}/clash"
    echo $(cat ${Clash_pid_file}) > "${Cgroup_memory_path}/clash/cgroup.procs"
    echo "${Cgroup_memory_limit}" > "${Cgroup_memory_path}/clash/memory.limit_in_bytes"
}

while getopts ":sk" signal ; do
    case ${signal} in
        s)
            stop_clash &> $logs_service && start_clash &>> $logs_service
            cgroup_limit &>> $logs_service
            ;;
        k)
            stop_clash &>> $logs_service
            ;;
        ?)
            echo ""
            ;;
    esac
done
